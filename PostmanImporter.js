// Generated by CoffeeScript 1.8.0
(function() {
  var PostmanImporter;

  PostmanImporter = function() {
    this.createPawRequest = function(context, postmanRequestsById, postmanRequestId) {
      var bodyObject, contentType, foundBody, headerLine, i, jsonObject, match, pawRequest, postmanBodyData, postmanHeaders, postmanRequest, _i, _j, _k, _len, _len1, _len2;
      postmanRequest = postmanRequestsById[postmanRequestId];
      if (!postmanRequest) {
        console.log("Corrupted Postman file, no request found for ID: " + postmanRequestId);
        return null;
      }
      pawRequest = context.createRequest(postmanRequest["name"], postmanRequest["method"], postmanRequest["url"]);
      postmanHeaders = postmanRequest["headers"].split("\n");
      for (_i = 0, _len = postmanHeaders.length; _i < _len; _i++) {
        i = postmanHeaders[_i];
        headerLine = postmanHeaders[i];
        match = headerLine.match(/^([^\s\:]*)\s*\:\s*(.*)$/);
        if (match) {
          pawRequest.setHeader(match[1], match[2]);
        }
      }
      if (postmanRequest["dataMode"] === "raw") {
        contentType = pawRequest.getHeaderByName("Content-Type");
        foundBody = false;
        if (contentType && contentType.indexOf("json") >= 0) {
          jsonObject = JSON.parse(postmanRequest["rawModeData"]);
          if (jsonObject) {
            pawRequest.jsonBody = jsonObject;
            foundBody = true;
          }
        }
        if (!foundBody) {
          pawRequest.body = postmanRequest["rawModeData"];
        }
      } else if (postmanRequest["dataMode"] === "urlencoded") {
        postmanBodyData = postmanRequest["data"];
        bodyObject = new Object();
        for (_j = 0, _len1 = postmanBodyData.length; _j < _len1; _j++) {
          i = postmanBodyData[_j];
          if (postmanBodyData[i]["type"] === "text") {
            bodyObject[postmanBodyData[i]["key"]] = postmanBodyData[i]["value"];
          }
        }
        pawRequest.urlEncodedBody = bodyObject;
      } else if (postmanRequest["dataMode"] === "params") {
        postmanBodyData = postmanRequest["data"];
        bodyObject = new Object();
        for (_k = 0, _len2 = postmanBodyData.length; _k < _len2; _k++) {
          i = postmanBodyData[_k];
          if (postmanBodyData[i]["type"] === "text") {
            bodyObject[postmanBodyData[i]["key"]] = postmanBodyData[i]["value"];
          }
        }
        pawRequest.multipartBody = bodyObject;
      }
      console.log("Created Request: " + postmanRequest["name"]);
      return pawRequest;
    };
    this.createPawGroup = function(context, postmanRequestsById, postmanFolder) {
      var pawGroup, pawRequest, postmanRequestId, _i, _len, _ref;
      pawGroup = context.createRequestGroup(postmanFolder["name"]);
      if (postmanFolder["order"]) {
        _ref = postmanFolder["order"];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          postmanRequestId = _ref[_i];
          pawRequest = this.createPawRequest(context, postmanRequestsById, postmanRequestId);
          if (pawRequest) {
            pawGroup.appendChild(pawRequest);
          }
        }
      }
      console.log("Created Group: " + postmanFolder["name"]);
      return pawGroup;
    };
    this.importString = function(context, string) {
      var pawGroup, pawRequest, pawRootGroup, postmanCollection, postmanFolder, postmanRequest, postmanRequestId, postmanRequestsById, _i, _j, _k, _len, _len1, _len2, _ref, _ref1, _ref2;
      postmanCollection = JSON.parse(string);
      if (!postmanCollection || !postmanCollection["requests"]) {
        throw new Error("Invalid Postman data");
      }
      postmanRequestsById = new Object();
      _ref = postmanCollection["requests"];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        postmanRequest = _ref[_i];
        postmanRequestsById[postmanRequest["id"]] = postmanRequest;
      }
      pawRootGroup = context.createRequestGroup(postmanCollection["name"]);
      if (postmanCollection["folders"]) {
        _ref1 = postmanCollection["folders"];
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          postmanFolder = _ref1[_j];
          pawGroup = this.createPawGroup(context, postmanRequestsById, postmanFolder);
          pawRootGroup.appendChild(pawGroup);
        }
      }
      if (postmanCollection["order"]) {
        _ref2 = postmanCollection["order"];
        for (_k = 0, _len2 = _ref2.length; _k < _len2; _k++) {
          postmanRequestId = _ref2[_k];
          pawRequest = this.createPawRequest(context, postmanRequestsById, postmanRequestId);
          pawRootGroup.appendChild(pawRequest);
        }
      }
      return true;
    };
  };

  PostmanImporter.identifier = "com.luckymarmot.PawExtensions.PostmanImporter";

  PostmanImporter.title = "Postman Importer";

  registerImporter(PostmanImporter);

}).call(this);
